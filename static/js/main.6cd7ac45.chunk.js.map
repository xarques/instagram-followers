{"version":3,"sources":["utils.js","FollowersChart.js","App.js","registerServiceWorker.js","index.js"],"names":["toDateAndFollowersArray","data","map","timestamp","Date","checkedDate","S","parseInt","followers","N","sort","a","b","toDateAndDeltaFollowersArray","dateAndFollowersArray","value","index","array","delta","buildFullTimeSeries","name","TimeSeries","columns","points","_ref","_ref2","Object","slicedToArray","d","getTime","buildCroppedTimeSeries","series","window","timeRange","aggregation","arguments","length","undefined","max","endDate","console","log","setHours","windowRollup","startDate","setDate","getDate","setMonth","getMonth","TimeRange","crop","fixedWindowRollup","windowSize","buildCroppedTimeSeriesDelta","sum","style","styler","key","color","FollowersChart","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","accountId","match","params","fetch","concat","then","res","json","hoursAndFollowersArray","fullFollowersSeries","croppedFollowersSeries","deltaHoursAndFollowersArray","fullDeltaFollowersSeries","croppedDeltaFollowersSeries","setState","state","objectSpread","onClick","interval","_this2","_this$state","react_default","createElement","className","atLast","get","lib_entry","range","titleStyle","fill","fontWeight","fontSize","height","axis","id","min","width","format","type","showGrid","selection","onSelectionChange","React","Component","App","Switch","Route","exact","path","component","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","BrowserRouter","src_App_0","document","getElementById","URL","process","origin","addEventListener","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.6cd7ac45.chunk.js","sourcesContent":["import {\n  TimeSeries,\n  TimeRange,\n  Index,\n  max,\n  sum\n} from \"pondjs\";\n\nconst toDateAndFollowersArray = data => {\n  return data\n    .map(timestamp => {\n      return [\n        new Date(timestamp.checkedDate.S),\n        parseInt(timestamp.followers.N, 10)\n      ];\n    })\n    .sort(function(a, b) {\n      return a[0] - b[0];\n    });\n};\n\nconst toDateAndDeltaFollowersArray = dateAndFollowersArray => {\n  return dateAndFollowersArray.map((value, index, array) => {\n    const delta = index > 0 ? value[1] - array[index - 1][1] : 0;\n    return [value[0], delta];\n  });\n};\n\nconst buildFullTimeSeries = (name, array) => {\n  return new TimeSeries({\n    name: name,\n    columns: [\"time\", \"value\"],\n    points: array.map(([d, value]) => [d.getTime(), value])\n  });\n};\n\nconst buildCroppedTimeSeries = (\n  series,\n  window,\n  aggregation = max,\n  endDate = new Date()\n) => {\n  console.log('buildCroppedTimeSeries endDate 0', endDate)\n  if (window !== \"1d\") {\n    endDate.setHours(23, 59, 59, 999);\n  }\n  console.log('buildCroppedTimeSeries endDate 1', endDate)\n\n  let timeRange;\n  let windowRollup = \"1h\";\n  let startDate = new Date(endDate.getTime());\n  switch (window) {\n    case \"1d\":\n      startDate.setDate(startDate.getDate() - 1);\n      break;\n    case \"1w\":\n      startDate.setDate(startDate.getDate() - 6);\n      windowRollup = \"1d\";\n      break;\n    case \"1m\":\n      startDate.setMonth(startDate.getMonth() - 1);\n      windowRollup = \"7d\";\n      break;\n    case \"3m\":\n      startDate.setMonth(startDate.getMonth() - 3);\n      windowRollup = \"30d\";\n      break;\n    default:\n      break;\n  }\n  console.log('buildCroppedTimeSeries startDate 0', startDate)\n\n  if (window !== \"1d\") {\n    startDate.setHours(0, 0, 0, 0);\n  }\n  console.log('buildCroppedTimeSeries startDate 1', startDate)\n\n  timeRange = new TimeRange(startDate.getTime(), endDate.getTime());\n\n  return series.crop(timeRange).fixedWindowRollup({\n    windowSize: windowRollup,\n    aggregation: { value: { value: aggregation() } }\n  });\n  // }).renameColumns({\n  //   renameMap: {data: \"value\"}\n  // })\n};\n\nconst buildCroppedTimeSeriesDelta = (\n  series,\n  window,\n  aggregation = sum,\n  endDate = new Date()\n) => {\n  return buildCroppedTimeSeries(series, window, aggregation, endDate);\n};\n\nconst buildTimeSeries = (name, array, interval, deep) => {\n  let resizedArray = array;\n  if (deep && array.length > deep) {\n    resizedArray = array.slice(array.length - deep, array.length);\n  }\n  let series = new TimeSeries({\n    name: name,\n    columns: [\"time\", \"value\"],\n    points: resizedArray.map(([d, value]) => [d.getTime(), value])\n  });\n  return series;\n};\n\nconst buildDailyTimeSeries = timeSeries => {\n  const dailyAvg = timeSeries.fixedWindowRollup({\n    windowSize: \"1d\",\n    aggregation: { value: { value: max() } }\n  });\n  return dailyAvg;\n};\n\nconst buildIndexTimeSeries = (name, array, interval, deep) => {\n  let resizedArray = array;\n\n  if (deep && array.length > deep) {\n    resizedArray = array.slice(array.length - deep, array.length);\n  }\n  return new TimeSeries({\n    name: name,\n    columns: [\"index\", \"value\"],\n    points: resizedArray.map(([d, value]) => [\n      Index.getIndexString(interval, d),\n      value\n    ])\n  });\n};\n\nconst daysIntoYear = date => {\n  return (\n    (Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()) -\n      Date.UTC(date.getFullYear(), 0, 0)) /\n    24 /\n    60 /\n    60 /\n    1000\n  );\n};\n\nexport {\n  toDateAndFollowersArray,\n  buildTimeSeries,\n  buildDailyTimeSeries,\n  buildIndexTimeSeries,\n  buildFullTimeSeries,\n  buildCroppedTimeSeries,\n  buildCroppedTimeSeriesDelta,\n  toDateAndDeltaFollowersArray,\n  daysIntoYear\n};\n","/**\n *  Copyright (c) 2015, The Regents of the University of California,\n *  through Lawrence Berkeley National Laboratory (subject to receipt\n *  of any required approvals from the U.S. Dept. of Energy).\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree.\n */\n\n/* eslint max-len:0 */\n\nimport React from \"react\";\n\nimport \"./FollowersChart.css\";\nimport {\n  toDateAndFollowersArray,\n  toDateAndDeltaFollowersArray,\n  buildFullTimeSeries,\n  buildCroppedTimeSeries,\n  buildCroppedTimeSeriesDelta\n} from \"./utils\";\nimport {\n  Charts,\n  ChartContainer,\n  ChartRow,\n  YAxis,\n  LineChart,\n  BarChart,\n  Resizable,\n  styler\n} from \"react-timeseries-charts\";\n\n// const style = {\n//   value: {\n//     stroke: \"#a02c2c\",\n//     opacity: 0.2\n//   }\n// };\n\nconst style = styler([{ key: \"value\", color: \"#A5C8E1\" }]);\n\nclass FollowersChart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      interval: \"1d\"\n    };\n  }\n\n  componentDidMount = () => {\n    const accountId = this.props.match.params.accountId || \"adrelanine\";\n    fetch(\n      `https://g43v3qwvj7.execute-api.eu-west-3.amazonaws.com/dev/followers/${accountId}`\n    )\n      .then(res => res.json())\n      .then(data => {\n        const hoursAndFollowersArray = toDateAndFollowersArray(data);\n        const fullFollowersSeries = buildFullTimeSeries(\n          \"Followers\",\n          hoursAndFollowersArray\n        );\n        const croppedFollowersSeries = buildCroppedTimeSeries(\n          fullFollowersSeries,\n          \"1d\"\n        );\n\n        const deltaHoursAndFollowersArray = toDateAndDeltaFollowersArray(\n          hoursAndFollowersArray\n        );\n        const fullDeltaFollowersSeries = buildFullTimeSeries(\n          \"Followers\",\n          deltaHoursAndFollowersArray\n        );\n        const croppedDeltaFollowersSeries = buildCroppedTimeSeriesDelta(\n          fullDeltaFollowersSeries,\n          \"1d\"\n        );\n\n        this.setState(state => {\n          return {\n            ...state,\n            fullFollowersSeries,\n            croppedFollowersSeries,\n            fullDeltaFollowersSeries,\n            croppedDeltaFollowersSeries\n          };\n        });\n      });\n  };\n\n  onClick = interval => {\n    this.setState(state => ({\n      ...state,\n      interval: interval,\n      croppedFollowersSeries: buildCroppedTimeSeries(\n        state.fullFollowersSeries,\n        interval\n      ),\n      croppedDeltaFollowersSeries: buildCroppedTimeSeriesDelta(\n        state.fullDeltaFollowersSeries,\n        interval\n      )\n    }));\n  };\n\n  render() {\n    const {\n      interval,\n      croppedFollowersSeries,\n      croppedDeltaFollowersSeries\n    } = this.state;\n    const accountId = this.props.match.params.accountId || \"adrelanine\";\n\n    return (\n      <div className=\"followersChart\">\n        <h1>{accountId}</h1>\n        <div className=\"dateInterval\">\n          <button\n            className={`button ${interval === \"1d\" ? \"button-selected\" : \"\"}`}\n            onClick={() => this.onClick(\"1d\")}\n          >\n            1D\n          </button>\n          <button\n            className={`button ${interval === \"1w\" ? \"button-selected\" : \"\"}`}\n            onClick={() => this.onClick(\"1w\")}\n          >\n            1W\n          </button>\n          <button\n            className={`button ${interval === \"1m\" ? \"button-selected\" : \"\"}`}\n            onClick={() => this.onClick(\"1m\")}\n          >\n            1M\n          </button>\n          <button\n            className={`button ${interval === \"3m\" ? \"button-selected\" : \"\"}`}\n            onClick={() => this.onClick(\"3m\")}\n          >\n            3M\n          </button>\n        </div>\n\n        {croppedFollowersSeries && (\n          <div>\n            <div className=\"graphTitle\">\n              <p>Total Followers</p>\n              <p>{croppedFollowersSeries.atLast().get(\"value\")}</p>\n            </div>\n            <Resizable>\n              <ChartContainer\n                timeRange={croppedFollowersSeries.range()}\n                titleStyle={{\n                  fill: \"#555\",\n                  fontWeight: 500,\n                  fontSize: \"1.5em\"\n                }}\n                // format=\"%b '%y\"\n                // timeAxisTickCount={5}\n              >\n                <ChartRow height=\"150\">\n                  <Charts>\n                    <LineChart\n                      axis=\"followers\"\n                      series={croppedFollowersSeries}\n                      style={style}\n                    />\n                  </Charts>\n                  <YAxis\n                    id=\"followers\"\n                    min={croppedFollowersSeries.min()}\n                    max={croppedFollowersSeries.max()}\n                    width=\"60\"\n                    format=\".1f\"\n                    type=\"linear\"\n                    showGrid\n                  />\n                </ChartRow>\n              </ChartContainer>\n            </Resizable>\n          </div>\n        )}\n        {croppedDeltaFollowersSeries && (\n          <div>\n            <div className=\"graphTitle\">\n              <p>New Followers</p>\n              <p>{croppedDeltaFollowersSeries.sum()}</p>\n            </div>\n            <Resizable>\n              <ChartContainer\n                timeRange={croppedDeltaFollowersSeries.range()}\n                titleStyle={{\n                  fill: \"#555\",\n                  fontWeight: 500,\n                  fontSize: \"1.5em\"\n                }}\n              >\n                <ChartRow height=\"150\">\n                  <Charts>\n                    <BarChart\n                      axis=\"deltaFollowers\"\n                      series={croppedDeltaFollowersSeries}\n                      style={style}\n                      //spacing={2}\n                      columns={[\"value\"]}\n                      selection={this.state.selection}\n                      onSelectionChange={selection =>\n                        this.setState({ selection })\n                      }\n                    />\n                  </Charts>\n                  <YAxis\n                    id=\"deltaFollowers\"\n                    min={croppedDeltaFollowersSeries.min()}\n                    max={croppedDeltaFollowersSeries.max()}\n                    width=\"60\"\n                    format=\".1f\"\n                    type=\"linear\"\n                    showGrid\n                  />\n                </ChartRow>\n              </ChartContainer>\n            </Resizable>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default FollowersChart;\n","import React, { Component } from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport FollowersChart from \"./FollowersChart\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Switch>\n          <Route\n            exact\n            path=\"/instagram-followers/:accountId\"\n            component={FollowersChart}\n          />\n          <Route component={FollowersChart} />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\nregisterServiceWorker();\n"],"sourceRoot":""}